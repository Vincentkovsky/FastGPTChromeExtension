(()=>{"use strict";class e{async getEncryptionKey(){const t=(chrome.runtime.id||"default-id")+e.SALT,n=new TextEncoder,s=n.encode(t),a=await crypto.subtle.importKey("raw",s,{name:"PBKDF2"},!1,["deriveKey"]);return crypto.subtle.deriveKey({name:"PBKDF2",salt:n.encode(e.SALT),iterations:1e5,hash:"SHA-256"},a,{name:e.ALGORITHM,length:e.KEY_LENGTH},!1,["encrypt","decrypt"])}async encrypt(t){try{const n=(new TextEncoder).encode(t),s=await this.getEncryptionKey(),a=crypto.getRandomValues(new Uint8Array(e.IV_LENGTH)),r=await crypto.subtle.encrypt({name:e.ALGORITHM,iv:a},s,n),i=new Uint8Array(a.length+r.byteLength);return i.set(a),i.set(new Uint8Array(r),a.length),btoa(String.fromCharCode(...i))}catch(e){throw new Error(`Encryption failed: ${e instanceof Error?e.message:"Unknown error"}`)}}async decrypt(t){try{const n=new Uint8Array(atob(t).split("").map(e=>e.charCodeAt(0))),s=n.slice(0,e.IV_LENGTH),a=n.slice(e.IV_LENGTH),r=await this.getEncryptionKey(),i=await crypto.subtle.decrypt({name:e.ALGORITHM,iv:s},r,a);return(new TextDecoder).decode(i)}catch(e){throw new Error(`Decryption failed: ${e instanceof Error?e.message:"Unknown error"}`)}}}e.ALGORITHM="AES-GCM",e.KEY_LENGTH=256,e.IV_LENGTH=12,e.SALT="fastgpt-chrome-ext-salt";class t{constructor(t){this.encryptionService=t||new e}async setFastGPTConfig(e){try{const t=await this.encryptionService.encrypt(e.apiKey),n={fastgptConfig:{baseUrl:e.baseUrl,appId:e.appId,apiKey:t}};return await this.setStorageData(n),{success:!0}}catch(e){return{success:!1,error:`Failed to store FastGPT config: ${e instanceof Error?e.message:"Unknown error"}`}}}async getFastGPTConfig(){try{const e=await this.getStorageData(["fastgptConfig"]);if(!e.fastgptConfig)return{success:!0,data:null};const t=await this.encryptionService.decrypt(e.fastgptConfig.apiKey);return{success:!0,data:{baseUrl:e.fastgptConfig.baseUrl,appId:e.fastgptConfig.appId,apiKey:t}}}catch(e){return{success:!1,error:`Failed to retrieve FastGPT config: ${e instanceof Error?e.message:"Unknown error"}`}}}async setSetupState(e,t){try{const n={setupState:{onboardingComplete:e,configurationComplete:t}};return await this.setStorageData(n),{success:!0}}catch(e){return{success:!1,error:`Failed to store setup state: ${e instanceof Error?e.message:"Unknown error"}`}}}async getSetupState(){try{const e=await this.getStorageData(["setupState"]),t={onboardingComplete:!1,configurationComplete:!1};return{success:!0,data:e.setupState||t}}catch(e){return{success:!1,error:`Failed to retrieve setup state: ${e instanceof Error?e.message:"Unknown error"}`}}}async setChatSession(e,t){try{const n=await this.getChatSessions(),s=n.success&&n.data||{};s[e]={messages:t.messages,createdAt:t.createdAt.toISOString(),updatedAt:t.updatedAt.toISOString()};const a={chatSessions:s};return await this.setStorageData(a),{success:!0}}catch(e){return{success:!1,error:`Failed to store chat session: ${e instanceof Error?e.message:"Unknown error"}`}}}async getChatSessions(){try{return{success:!0,data:(await this.getStorageData(["chatSessions"])).chatSessions||null}}catch(e){return{success:!1,error:`Failed to retrieve chat sessions: ${e instanceof Error?e.message:"Unknown error"}`}}}async setChatSessions(e){try{const t={chatSessions:e};return await this.setStorageData(t),{success:!0}}catch(e){return{success:!1,error:`Failed to set chat sessions: ${e instanceof Error?e.message:"Unknown error"}`}}}async setPreferences(e){try{const t={preferences:e};return await this.setStorageData(t),{success:!0}}catch(e){return{success:!1,error:`Failed to store preferences: ${e instanceof Error?e.message:"Unknown error"}`}}}async getPreferences(){try{const e=await this.getStorageData(["preferences"]),t={streamingEnabled:!0};return{success:!0,data:e.preferences||t}}catch(e){return{success:!1,error:`Failed to retrieve preferences: ${e instanceof Error?e.message:"Unknown error"}`}}}async getExtensionState(){try{const e=await this.getSetupState(),t=await this.getFastGPTConfig();if(!e.success)return{success:!1,error:e.error};const n=e.data;let s="onboarding";return n.onboardingComplete&&!n.configurationComplete?s="configuration":n.onboardingComplete&&n.configurationComplete&&(s="chat"),{success:!0,data:{setupComplete:n.onboardingComplete,configurationComplete:n.configurationComplete,currentView:s,fastgptConfig:t.success&&t.data||void 0}}}catch(e){return{success:!1,error:`Failed to get extension state: ${e instanceof Error?e.message:"Unknown error"}`}}}async clearAllData(){try{return await new Promise((e,t)=>{chrome.storage.local.clear(()=>{chrome.runtime.lastError?t(new Error(chrome.runtime.lastError.message)):e()})}),{success:!0}}catch(e){return{success:!1,error:`Failed to clear data: ${e instanceof Error?e.message:"Unknown error"}`}}}async removeData(e){try{return await new Promise((t,n)=>{chrome.storage.local.remove(e,()=>{chrome.runtime.lastError?n(new Error(chrome.runtime.lastError.message)):t()})}),{success:!0}}catch(e){return{success:!1,error:`Failed to remove data: ${e instanceof Error?e.message:"Unknown error"}`}}}async setStorageData(e){return new Promise((t,n)=>{chrome.storage.local.set(e,()=>{chrome.runtime.lastError?n(new Error(chrome.runtime.lastError.message)):t()})})}async getStorageData(e){return new Promise((t,n)=>{chrome.storage.local.get(e,e=>{chrome.runtime.lastError?n(new Error(chrome.runtime.lastError.message)):t(e)})})}}class n{constructor(e){this.currentState=null,this.stateChangeListeners=[],this.storageManager=e||new t}async initialize(){const e=await this.loadState();return e.success&&e.data&&(this.currentState=e.data),e}getCurrentState(){return this.currentState}async loadState(){try{const e=await this.storageManager.getExtensionState();return e.success&&e.data&&(this.currentState=e.data,this.notifyStateChange(e.data)),e}catch(e){return{success:!1,error:`Failed to load state: ${e instanceof Error?e.message:"Unknown error"}`}}}async completeOnboarding(){try{const e=await this.storageManager.getSetupState();if(!e.success)return{success:!1,error:e.error};const t=e.data,n=await this.storageManager.setSetupState(!0,t.configurationComplete);return n.success?await this.refreshState():{success:!1,error:n.error}}catch(e){return{success:!1,error:`Failed to complete onboarding: ${e instanceof Error?e.message:"Unknown error"}`}}}async completeConfiguration(e){try{const t=await this.storageManager.setFastGPTConfig(e);if(!t.success)return{success:!1,error:t.error};const n=await this.storageManager.getSetupState();if(!n.success)return{success:!1,error:n.error};const s=n.data,a=await this.storageManager.setSetupState(s.onboardingComplete,!0);return a.success?await this.refreshState():{success:!1,error:a.error}}catch(e){return{success:!1,error:`Failed to complete configuration: ${e instanceof Error?e.message:"Unknown error"}`}}}async resetOnboarding(){try{const e=await this.storageManager.getSetupState();if(!e.success)return{success:!1,error:e.error};const t=e.data,n=await this.storageManager.setSetupState(!1,t.configurationComplete);return n.success?await this.refreshState():{success:!1,error:n.error}}catch(e){return{success:!1,error:`Failed to reset onboarding: ${e instanceof Error?e.message:"Unknown error"}`}}}async resetConfiguration(){try{const e=await this.storageManager.removeData(["fastgptConfig"]);if(!e.success)return{success:!1,error:e.error};const t=await this.storageManager.getSetupState();if(!t.success)return{success:!1,error:t.error};const n=t.data,s=await this.storageManager.setSetupState(n.onboardingComplete,!1);return s.success?await this.refreshState():{success:!1,error:s.error}}catch(e){return{success:!1,error:`Failed to reset configuration: ${e instanceof Error?e.message:"Unknown error"}`}}}async resetAllState(){try{const e=await this.storageManager.clearAllData();return e.success?await this.refreshState():{success:!1,error:e.error}}catch(e){return{success:!1,error:`Failed to reset all state: ${e instanceof Error?e.message:"Unknown error"}`}}}isReadyForChat(){return!0===this.currentState?.setupComplete&&!0===this.currentState?.configurationComplete}isOnboardingComplete(){return!0===this.currentState?.setupComplete}isConfigurationComplete(){return!0===this.currentState?.configurationComplete}getCurrentView(){return this.currentState?.currentView||"onboarding"}addStateChangeListener(e){this.stateChangeListeners.push(e)}removeStateChangeListener(e){const t=this.stateChangeListeners.indexOf(e);t>-1&&this.stateChangeListeners.splice(t,1)}canTransitionTo(e){switch(this.getCurrentView(),e){case"onboarding":return!0;case"configuration":return this.isOnboardingComplete();case"chat":return this.isOnboardingComplete()&&this.isConfigurationComplete();default:return!1}}async forceTransitionTo(e){return this.canTransitionTo(e)?(this.currentState&&(this.currentState.currentView=e,this.notifyStateChange(this.currentState)),{success:!0,data:this.currentState}):{success:!1,error:`Invalid state transition from ${this.getCurrentView()} to ${e}`}}getFastGPTConfig(){return this.currentState?.fastgptConfig||null}async setCurrentView(e){return this.canTransitionTo(e)?(this.currentState&&(this.currentState.currentView=e,this.notifyStateChange(this.currentState)),{success:!0,data:this.currentState}):{success:!1,error:`Invalid state transition from ${this.getCurrentView()} to ${e}`}}async refreshState(){const e=await this.storageManager.getExtensionState();return e.success&&e.data&&(this.currentState=e.data,this.notifyStateChange(e.data)),e}notifyStateChange(e){this.stateChangeListeners.forEach(t=>{try{t(e)}catch(e){console.error("Error in state change listener:",e)}})}}new n;class s{constructor(e){this.currentStepIndex=0,this.steps=[{id:"welcome",title:"Welcome to FastGPT Extension",description:"This extension connects you to your FastGPT knowledge base directly from your browser. Let's get you set up in just a few steps!",completed:!1},{id:"visit-fastgpt",title:"Access FastGPT Platform",description:"Choose your preferred FastGPT platform to create an account or sign in. Both platforms offer the same powerful AI capabilities.",actionUrl:"https://fastgpt.io",actionText:"Choose Platform",completed:!1},{id:"create-knowledge-base",title:"Create Your Knowledge Base",description:"Upload your documents, PDFs, or text content to create a personalized knowledge base. This will be the source of information for your AI assistant.",completed:!1},{id:"create-simple-app",title:"Build Your AI App",description:"Create a simple app in FastGPT that connects to your knowledge base. This app will handle conversations and provide intelligent responses.",completed:!1},{id:"get-credentials",title:"Get Your API Credentials",description:"Copy your FastGPT Base URL, App ID, and API Key from your app settings. These credentials will connect the extension to your AI assistant.",completed:!1}],this.stateManager=e}async render(e){console.log("Onboarding render called, current step:",this.currentStepIndex),await this.loadProgress(),console.log("Progress loaded, current step:",this.currentStepIndex),e.innerHTML=this.getOnboardingHTML(),console.log("HTML updated"),this.attachEventListeners(e),console.log("Event listeners attached")}getOnboardingHTML(){const e=this.steps[this.currentStepIndex],t=(this.currentStepIndex+1)/this.steps.length*100;return`\n      <a href="#main-content" class="skip-link">Skip to main content</a>\n      <div class="onboarding-container view-container" role="main" aria-labelledby="onboarding-title">\n        <header class="navigation-header" role="banner">\n          <h1 id="onboarding-title" class="navigation-title">FastGPT Setup</h1>\n          <div class="navigation-controls">\n            <div class="view-state-indicator onboarding" aria-label="Current view: Setup">Setup</div>\n          </div>\n        </header>\n        \n        <div class="onboarding-header">\n          <div class="progress-bar" role="progressbar" aria-valuenow="${t}" aria-valuemin="0" aria-valuemax="100" aria-label="Setup progress">\n            <div class="progress-fill" style="width: ${t}%"></div>\n          </div>\n          <div class="step-counter" aria-live="polite">Step ${this.currentStepIndex+1} of ${this.steps.length}</div>\n        </div>\n\n        <main id="main-content" class="onboarding-content" tabindex="-1">\n          <div class="step-icon" aria-hidden="true">\n            ${this.getStepIcon(e.id)}\n          </div>\n          \n          <h2 class="step-title" id="step-title">${e.title}</h2>\n          <p class="step-description" id="step-description">${e.description}</p>\n\n          ${e.actionUrl?`\n            <div class="step-action">\n              <button class="action-button focusable" data-url="${e.actionUrl}" \n                      aria-describedby="step-description"\n                      title="Opens ${e.actionUrl} in a new tab">\n                ${e.actionText||"Open Link"}\n                <span class="sr-only"> (opens in new tab)</span>\n              </button>\n            </div>\n          `:""}\n\n          ${this.getStepSpecificContent(e.id)}\n        </main>\n\n        <nav class="onboarding-navigation" role="navigation" aria-label="Setup navigation">\n          <button class="nav-button secondary focusable" id="prev-button" \n                  ${0===this.currentStepIndex?'disabled aria-disabled="true"':'aria-disabled="false"'}\n                  aria-label="Go to previous step"\n                  title="Previous step">\n            <span aria-hidden="true">←</span> Previous\n          </button>\n          \n          <div class="nav-buttons-right">\n            ${this.currentStepIndex===this.steps.length-1?'\n              <button class="nav-button primary focusable" id="complete-button"\n                      aria-label="Complete setup and proceed to configuration"\n                      title="Complete setup">\n                Complete Setup\n              </button>\n            ':'\n              <button class="nav-button secondary focusable" id="skip-button"\n                      aria-label="Skip remaining steps and go to configuration"\n                      title="Skip to configuration">\n                Skip to Configuration\n              </button>\n              <button class="nav-button primary focusable" id="next-button"\n                      aria-label="Go to next step"\n                      title="Next step">\n                Next <span aria-hidden="true">→</span>\n              </button>\n            '}\n          </div>\n        </nav>\n      </div>\n    `}getStepIcon(e){return`<span class="step-emoji">${{welcome:"👋","visit-fastgpt":"🌐","create-knowledge-base":"📚","create-simple-app":"⚡","get-credentials":"🔑"}[e]||"📋"}</span>`}getStepSpecificContent(e){switch(e){case"welcome":return'\n          <div class="step-details">\n            <div class="feature-list">\n              <ul>\n                <li>🤖 AI-powered responses from your knowledge base</li>\n                <li>🔒 Secure, private conversations</li>\n                <li>⚡ Quick access from any webpage</li>\n              </ul>\n            </div>\n          </div>\n        ';case"visit-fastgpt":return'\n          <div class="platform-options">\n            <p class="platform-note">Choose your preferred FastGPT platform:</p>\n            <div class="platform-buttons" role="group" aria-label="FastGPT platform options">\n              <button class="platform-button focusable" data-url="https://fastgpt.io"\n                      aria-label="Visit FastGPT.io global platform"\n                      title="Opens FastGPT.io in a new tab">\n                <div class="platform-info">\n                  <strong>FastGPT.io</strong>\n                  <span>Global platform</span>\n                </div>\n                <span class="sr-only"> (opens in new tab)</span>\n              </button>\n              <button class="platform-button focusable" data-url="https://fastgpt.cn"\n                      aria-label="Visit FastGPT.cn China platform"\n                      title="Opens FastGPT.cn in a new tab">\n                <div class="platform-info">\n                  <strong>FastGPT.cn</strong>\n                  <span>China platform</span>\n                </div>\n                <span class="sr-only"> (opens in new tab)</span>\n              </button>\n            </div>\n          </div>\n        ';case"create-knowledge-base":return'\n          <div class="step-instructions">\n            <ol>\n              <li>Navigate to "Dataset" in FastGPT</li>\n              <li>Click "Create New"</li>\n              <li>Upload your documents (PDF, TXT, DOCX, etc.)</li>\n              <li>Wait for processing to complete</li>\n            </ol>\n          </div>\n        ';case"create-simple-app":return'\n          <div class="step-instructions">\n            <ol>\n              <li>Go to "Studio" section in FastGPT</li>\n              <li>Click "Team" and choose "Simple App"</li>\n              <li>Connect it to your knowledge base</li>\n              <li>Configure and publish your app</li>\n            </ol>\n          </div>\n        ';case"get-credentials":return'\n          <div class="step-instructions">\n            <ol>\n              <li>Choose the app in Studio and Click</li>\n              <li>Go to "Publish"tab</li>\n              <li>Click "API Request"</li>\n              <li>Click "Create New"</li>\n              <li>Copy API Base URL, App ID, and API Key</li>\n            </ol>\n            <div class="warning-box">\n              <strong>⚠️</strong> Keep your API key secure!\n            </div>\n          </div>\n        ';default:return""}}attachEventListeners(e){console.log("Attaching event listeners..."),this.setupKeyboardNavigation(e);const t=e.querySelector("#prev-button");console.log("Previous button found:",!!t),t&&(t.addEventListener("click",async()=>{console.log("Previous button clicked"),await this.goToPreviousStep(e)}),t.addEventListener("keydown",async t=>{"Enter"!==t.key&&" "!==t.key||(t.preventDefault(),await this.goToPreviousStep(e))}));const n=e.querySelector("#next-button");console.log("Next button found:",!!n),n&&(n.addEventListener("click",t=>{t.preventDefault(),t.stopPropagation(),console.log("Next button clicked"),this.goToNextStep(e).catch(e=>{console.error("Error in goToNextStep:",e)})}),n.addEventListener("keydown",t=>{"Enter"!==t.key&&" "!==t.key||(t.preventDefault(),this.goToNextStep(e).catch(e=>{console.error("Error in goToNextStep:",e)}))}));const s=e.querySelector("#skip-button");s&&(s.addEventListener("click",async()=>{console.log("Skip button clicked"),await this.completeOnboarding()}),s.addEventListener("keydown",async e=>{"Enter"!==e.key&&" "!==e.key||(e.preventDefault(),await this.completeOnboarding())}));const a=e.querySelector("#complete-button");if(a&&(a.addEventListener("click",async()=>await this.completeOnboarding()),a.addEventListener("keydown",async e=>{"Enter"!==e.key&&" "!==e.key||(e.preventDefault(),await this.completeOnboarding())})),e.querySelectorAll(".action-button, .platform-button").forEach(e=>{e.addEventListener("click",e=>{const t=e.target.getAttribute("data-url");t&&(this.openExternalLink(t),this.markCurrentStepCompleted())}),e.addEventListener("keydown",e=>{const t=e;if("Enter"===t.key||" "===t.key){e.preventDefault();const t=e.target.getAttribute("data-url");t&&(this.openExternalLink(t),this.markCurrentStepCompleted())}})}),e.querySelector("#main-content")){const t=e.querySelector("#step-title");t&&t.setAttribute("aria-live","polite")}}setupKeyboardNavigation(e){e.addEventListener("keydown",async t=>{if(!(t.target instanceof HTMLInputElement||t.target instanceof HTMLTextAreaElement))switch(t.key){case"ArrowLeft":case"ArrowUp":t.preventDefault(),this.currentStepIndex>0&&await this.goToPreviousStep(e);break;case"ArrowRight":case"ArrowDown":t.preventDefault(),this.currentStepIndex<this.steps.length-1&&await this.goToNextStep(e);break;case"Home":t.preventDefault(),0!==this.currentStepIndex&&(this.currentStepIndex=0,this.saveProgress(),await this.render(e));break;case"End":t.preventDefault(),this.currentStepIndex!==this.steps.length-1&&(this.currentStepIndex=this.steps.length-1,this.saveProgress(),await this.render(e));break;case"Escape":t.preventDefault(),await this.completeOnboarding()}});const t=e.querySelectorAll(".focusable");t.forEach((e,n)=>{e.addEventListener("keydown",e=>{const s=e;"Tab"===s.key&&(s.shiftKey&&0===n?(e.preventDefault(),t[t.length-1].focus()):s.shiftKey||n!==t.length-1||(e.preventDefault(),t[0].focus()))})}),e.classList.add("keyboard-navigation-active")}async goToPreviousStep(e){console.log("goToPreviousStep called, current step:",this.currentStepIndex),this.currentStepIndex>0?(this.currentStepIndex--,console.log("Moving to previous step:",this.currentStepIndex),this.saveProgress(),await this.render(e)):console.log("Already at first step")}async goToNextStep(e){console.log("goToNextStep called, current step:",this.currentStepIndex),this.markCurrentStepCompleted(),this.currentStepIndex<this.steps.length-1?(this.currentStepIndex++,console.log("Moving to step:",this.currentStepIndex),this.saveProgress(),await this.render(e)):console.log("Already at last step")}async goToStep(e,t){e>=0&&e<this.steps.length&&(this.currentStepIndex=e,await this.render(t))}markCurrentStepCompleted(){this.steps[this.currentStepIndex].completed=!0,this.saveProgress()}saveProgress(){const e={currentStep:this.currentStepIndex,completedSteps:this.steps.map(e=>e.completed)};chrome.storage.local.set({onboardingProgress:e})}async loadProgress(){try{const e=await chrome.storage.local.get(["onboardingProgress"]);if(e.onboardingProgress){const t=e.onboardingProgress;this.currentStepIndex=Math.min(t.currentStep||0,this.steps.length-1),t.completedSteps&&Array.isArray(t.completedSteps)&&t.completedSteps.forEach((e,t)=>{t<this.steps.length&&(this.steps[t].completed=e)})}}catch(e){console.error("Failed to load onboarding progress:",e)}}async completeOnboarding(){try{this.steps.forEach(e=>e.completed=!0),this.saveProgress();const e=await this.stateManager.completeOnboarding();e.success?window.dispatchEvent(new CustomEvent("onboardingComplete")):(console.error("Failed to complete onboarding:",e.error),alert("Failed to complete onboarding. Please try again."))}catch(e){console.error("Error completing onboarding:",e),alert("An error occurred while completing onboarding.")}}openExternalLink(e){chrome.tabs.create({url:e})}getProgress(){const e=this.steps.filter(e=>e.completed).length;return{current:e,total:this.steps.length,percentage:e/this.steps.length*100}}isComplete(){return this.steps.every(e=>e.completed)}isAllStepsCompleted(){return this.steps.every(e=>e.completed)}updateStepIndicators(e){e.querySelectorAll(".step-indicator").forEach((e,t)=>{const n=this.steps[t];e.className=`step-indicator ${t===this.currentStepIndex?"active":""} ${n.completed?"completed":""}`,e.textContent=n.completed?"✓":(t+1).toString()})}reset(){this.currentStepIndex=0,this.steps.forEach(e=>{e.completed=!1})}}class a{constructor(e){this.defaultRetryOptions={maxRetries:3,baseDelay:1e3,maxDelay:1e4,backoffMultiplier:2},this.config=e}async testConnection(){try{const e=this.validateConfig();if(e)return{success:!1,error:e.message,details:"Configuration validation failed"};const t=await this.makeTestRequest();return t.success?{success:!0,details:"Connection test successful"}:{success:!1,error:t.error?.message||"Connection test failed",details:t.error?.type||"Unknown error"}}catch(e){return{success:!1,error:"Unexpected error during connection test",details:e instanceof Error?e.message:"Unknown error"}}}validateConfig(){if(!this.config.baseUrl)return{message:"Base URL is required",type:"validation"};if(!this.config.appId)return{message:"App ID is required",type:"validation"};if(!this.config.apiKey)return{message:"API Key is required",type:"validation"};try{const e=new URL(this.config.baseUrl);if(!["http:","https:"].includes(e.protocol))return{message:"Base URL must use HTTP or HTTPS protocol",type:"validation"}}catch{return{message:"Invalid Base URL format",type:"validation"}}return null}async makeTestRequest(){try{return await this.executeWithRetry(async()=>{const e=this.buildApiUrl("/v1/chat/completions"),t={chatId:`test_${Date.now()}`,stream:!1,detail:!1,messages:[{role:"user",content:"test connection"}]},n=await fetch(e,{method:"POST",headers:{Authorization:`Bearer ${this.config.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify(t)});if(n.ok)return{success:!0};{const e=await this.parseErrorResponse(n);if(e.retryable)throw new Error(e.message);return{success:!1,error:e}}})}catch(e){return e instanceof TypeError&&e.message.includes("fetch")?{success:!1,error:{message:"Network error: Unable to connect to FastGPT server",type:"network",retryable:!0}}:{success:!1,error:{message:e instanceof Error?e.message:"Unknown network error",type:"network",retryable:!0}}}}buildApiUrl(e){const t=this.config.baseUrl.replace(/\/$/,""),n=t.includes("/api")?"":"/api";return`${t}${n}${e}`}async parseErrorResponse(e){try{const t=await e.json(),n=e.headers.get("Retry-After");switch(e.status){case 401:return{code:401,message:"Authentication failed: Invalid API key",type:"authentication",retryable:!1};case 403:return{code:403,message:"Access forbidden: Check your API key permissions",type:"authentication",retryable:!1};case 404:return{code:404,message:"API endpoint not found: Check your Base URL",type:"validation",retryable:!1};case 400:return{code:400,message:t.message||"Bad request: Invalid configuration",type:"validation",retryable:!1};case 429:return{code:429,message:"Rate limit exceeded: Too many requests",type:"server",retryable:!0,retryAfter:n?parseInt(n,10):void 0};case 500:case 502:case 503:case 504:return{code:e.status,message:"Server error: FastGPT service is temporarily unavailable",type:"server",retryable:!0,retryAfter:n?parseInt(n,10):void 0};case 408:return{code:408,message:"Request timeout: The server took too long to respond",type:"server",retryable:!0};default:return{code:e.status,message:t.message||`HTTP ${e.status}: ${e.statusText}`,type:"unknown",retryable:e.status>=500}}}catch{return{code:e.status,message:`HTTP ${e.status}: ${e.statusText}`,type:"unknown",retryable:e.status>=500}}}async executeWithRetry(e,t={}){const n={...this.defaultRetryOptions,...t};let s;for(let t=0;t<=n.maxRetries;t++)try{return await e()}catch(e){if(s=e,t===n.maxRetries)break;if(!this.isRetryableError(e))throw e;const a=this.calculateRetryDelay(t,n,e);await this.sleep(a)}throw s}isRetryableError(e){return!!(e instanceof TypeError&&e.message.includes("fetch")||e instanceof Error&&e.message.includes("Rate limit exceeded")||e instanceof Error&&e.message.includes("Server error")||e instanceof Error&&e.message.includes("Request timeout")||e instanceof Error&&e.message.includes("Network error"))}calculateRetryDelay(e,t,n){if(n instanceof Error&&n.message.includes("Rate limit exceeded"))return Math.min(t.baseDelay*Math.pow(t.backoffMultiplier,e+1),t.maxDelay);const s=Math.min(t.baseDelay*Math.pow(t.backoffMultiplier,e),t.maxDelay);return s+.1*Math.random()*s}sleep(e){return new Promise(t=>setTimeout(t,e))}async*sendMessageStream(e,t,n){const s=this.validateConfig();if(s)throw new Error(s.message);const a=await this.executeWithRetry(async()=>this.createStreamGenerator(e,t,n));yield*a}async*sendMessageStreamWithEvents(e,t,n,s){const a=this.validateConfig();if(a)return void(yield{type:"error",error:{type:"connection",message:a.message,recoverable:!1}});const r=`msg_${Date.now()}_${Math.random().toString(36).substr(2,9)}`;let i=0;try{yield{type:"start",metadata:{messageId:r,totalChunks:0,currentChunk:0}};const a=await this.executeWithRetry(async()=>this.createEnhancedStreamGenerator(e,t,n,s));for await(const e of a)i++,yield{type:"chunk",data:e,metadata:{messageId:r,currentChunk:i}};yield{type:"complete",metadata:{messageId:r,totalChunks:i,currentChunk:i}}}catch(e){const t=this.classifyStreamingError(e);yield{type:"error",error:t,metadata:{messageId:r,currentChunk:i}}}}async createEnhancedStreamGenerator(e,t,n,s){const a=this.buildApiUrl("/v1/chat/completions"),r={chatId:t,stream:!0,detail:!1,messages:[{role:"user",content:e}],variables:n},i=new AbortController,o=s?.timeout?setTimeout(()=>{i.abort()},s.timeout):null;s?.abortSignal&&s.abortSignal.addEventListener("abort",()=>{i.abort()});try{const e=await fetch(a,{method:"POST",headers:{Authorization:`Bearer ${this.config.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify(r),signal:i.signal});if(o&&clearTimeout(o),!e.ok){const t=await this.parseErrorResponse(e);if(t.retryable)throw new Error(t.message);throw new Error(t.message)}if(!e.body)throw new Error("No response body received");return this.processEnhancedStreamResponse(e.body,i.signal)}catch(e){if(o&&clearTimeout(o),e instanceof Error&&"AbortError"===e.name)throw new Error("Request was aborted");throw e}}async createStreamGenerator(e,t,n){const s=this.buildApiUrl("/v1/chat/completions"),a={chatId:t,stream:!0,detail:!1,messages:[{role:"user",content:e}],variables:n},r=await fetch(s,{method:"POST",headers:{Authorization:`Bearer ${this.config.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify(a)});if(!r.ok){const e=await this.parseErrorResponse(r);if(e.retryable)throw new Error(e.message);throw new Error(e.message)}if(!r.body)throw new Error("No response body received");return this.processStreamResponse(r.body)}async*processEnhancedStreamResponse(e,t){const n=e.getReader(),s=new TextDecoder;let a="";try{for(;;){if(t?.aborted)throw new Error("Stream was aborted");const{done:e,value:r}=await n.read();if(e)break;a+=s.decode(r,{stream:!0});const i=a.split("\n");a=i.pop()||"";for(const e of i){const t=e.trim();if(""!==t&&"data: [DONE]"!==t&&t.startsWith("data: "))try{const e=t.slice(6),n=JSON.parse(e);n.choices&&n.choices[0]&&n.choices[0].delta.content&&(yield n.choices[0].delta.content)}catch(e){console.warn("Failed to parse streaming chunk:",e);continue}}}if(a.trim()){const e=a.trim();if(e.startsWith("data: ")&&"data: [DONE]"!==e)try{const t=e.slice(6),n=JSON.parse(t);n.choices&&n.choices[0]&&n.choices[0].delta.content&&(yield n.choices[0].delta.content)}catch(e){console.warn("Failed to parse final streaming chunk:",e)}}}catch(e){if(e instanceof Error&&"AbortError"===e.name)throw new Error("Stream was aborted");if(e instanceof Error&&e.message.includes("network"))throw new Error("Network connection lost during streaming");throw e}finally{n.releaseLock()}}async*processStreamResponse(e){const t=e.getReader(),n=new TextDecoder;try{for(;;){const{done:e,value:s}=await t.read();if(e)break;const a=n.decode(s,{stream:!0}).split("\n");for(const e of a){const t=e.trim();if(""!==t&&"data: [DONE]"!==t&&t.startsWith("data: "))try{const e=t.slice(6),n=JSON.parse(e);n.choices&&n.choices[0]&&n.choices[0].delta.content&&(yield n.choices[0].delta.content)}catch(e){continue}}}}finally{t.releaseLock()}}async sendMessage(e,t,n){const s=this.validateConfig();if(s)throw new Error(s.message);return await this.executeWithRetry(async()=>{const s=this.buildApiUrl("/v1/chat/completions"),a={chatId:t,stream:!1,detail:!1,messages:[{role:"user",content:e}],variables:n},r=await fetch(s,{method:"POST",headers:{Authorization:`Bearer ${this.config.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify(a)});if(!r.ok){const e=await this.parseErrorResponse(r);if(e.retryable)throw new Error(e.message);throw new Error(e.message)}const i=await r.json();if(i.choices&&i.choices[0]&&i.choices[0].message)return i.choices[0].message.content;throw new Error("Invalid response format from FastGPT API")})}async sendMessageWithHistory(e,t,n){const s=this.validateConfig();if(s)throw new Error(s.message);return await this.executeWithRetry(async()=>{const s=this.buildApiUrl("/v1/chat/completions"),a=e.map(e=>({role:e.role,content:e.content})),r={chatId:t,stream:!1,detail:!1,messages:a,variables:n},i=await fetch(s,{method:"POST",headers:{Authorization:`Bearer ${this.config.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify(r)});if(!i.ok){const e=await this.parseErrorResponse(i);if(e.retryable)throw new Error(e.message);throw new Error(e.message)}const o=await i.json();if(o.choices&&o.choices[0]&&o.choices[0].message)return o.choices[0].message.content;throw new Error("Invalid response format from FastGPT API")})}async*sendMessageWithHistoryStream(e,t,n){const s=this.validateConfig();if(s)throw new Error(s.message);const a=await this.executeWithRetry(async()=>this.createStreamGeneratorWithHistory(e,t,n));yield*a}async createStreamGeneratorWithHistory(e,t,n){const s=this.buildApiUrl("/v1/chat/completions"),a={chatId:t,stream:!0,detail:!1,messages:e.map(e=>({role:e.role,content:e.content})),variables:n},r=await fetch(s,{method:"POST",headers:{Authorization:`Bearer ${this.config.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify(a)});if(!r.ok){const e=await this.parseErrorResponse(r);if(e.retryable)throw new Error(e.message);throw new Error(e.message)}if(!r.body)throw new Error("No response body received");return this.processStreamResponse(r.body)}classifyStreamingError(e){return e instanceof Error?"AbortError"===e.name||e.message.includes("aborted")?{type:"abort",message:"Request was cancelled or timed out",recoverable:!0}:e.message.includes("timeout")?{type:"timeout",message:"Request timed out while streaming",recoverable:!0}:e.message.includes("network")||e.message.includes("fetch")||e.message.includes("connection lost")?{type:"connection",message:"Network connection lost during streaming",recoverable:!0}:e.message.includes("parse")||e.message.includes("JSON")?{type:"parsing",message:"Failed to parse streaming response",recoverable:!1}:e.message.includes("Authentication failed")||e.message.includes("Invalid API key")||e.message.includes("Access forbidden")?{type:"connection",message:e.message,recoverable:!1}:(e.message.includes("Server error")||e.message.includes("service unavailable"),{type:"connection",message:e.message,recoverable:!0}):{type:"connection",message:"An unknown error occurred during streaming",recoverable:!1}}async*sendMessageWithHistoryStreamWithEvents(e,t,n,s){const a=this.validateConfig();if(a)return void(yield{type:"error",error:{type:"connection",message:a.message,recoverable:!1}});const r=`msg_${Date.now()}_${Math.random().toString(36).substr(2,9)}`;let i=0;try{yield{type:"start",metadata:{messageId:r,totalChunks:0,currentChunk:0}};const a=await this.executeWithRetry(async()=>this.createEnhancedStreamGeneratorWithHistory(e,t,n,s));for await(const e of a)i++,yield{type:"chunk",data:e,metadata:{messageId:r,currentChunk:i}};yield{type:"complete",metadata:{messageId:r,totalChunks:i,currentChunk:i}}}catch(e){const t=this.classifyStreamingError(e);yield{type:"error",error:t,metadata:{messageId:r,currentChunk:i}}}}async createEnhancedStreamGeneratorWithHistory(e,t,n,s){const a=this.buildApiUrl("/v1/chat/completions"),r={chatId:t,stream:!0,detail:!1,messages:e.map(e=>({role:e.role,content:e.content})),variables:n},i=new AbortController,o=s?.timeout?setTimeout(()=>{i.abort()},s.timeout):null;s?.abortSignal&&s.abortSignal.addEventListener("abort",()=>{i.abort()});try{const e=await fetch(a,{method:"POST",headers:{Authorization:`Bearer ${this.config.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify(r),signal:i.signal});if(o&&clearTimeout(o),!e.ok){const t=await this.parseErrorResponse(e);if(t.retryable)throw new Error(t.message);throw new Error(t.message)}if(!e.body)throw new Error("No response body received");return this.processEnhancedStreamResponse(e.body,i.signal)}catch(e){if(o&&clearTimeout(o),e instanceof Error&&"AbortError"===e.name)throw new Error("Request was aborted");throw e}}static getErrorMessage(e){switch(e.type){case"network":return"Unable to connect to FastGPT server. Please check your internet connection and Base URL.";case"authentication":return"Authentication failed. Please check your API key and ensure it has the correct permissions.";case"validation":return"Configuration error. Please verify your Base URL, App ID, and API key are correct.";case"server":return"FastGPT server is temporarily unavailable. Please try again later.";default:return e.message||"An unexpected error occurred during connection test."}}}class r{constructor(e){this.container=null,this.formData={},this.stateManager=e}async render(e){this.container=e,await this.loadExistingConfiguration(),this.container.innerHTML=this.getConfigurationHTML(),this.setupEventListeners()}async loadExistingConfiguration(){await this.stateManager.loadState();const e=this.stateManager.getCurrentState();e?.fastgptConfig&&(this.formData={...e.fastgptConfig})}getConfigurationHTML(){return`\n      <a href="#main-content" class="skip-link">Skip to main content</a>\n      <div class="configuration-container view-container" role="main" aria-labelledby="config-title">\n        <header class="navigation-header" role="banner">\n          <h1 id="config-title" class="navigation-title">Configure FastGPT Connection</h1>\n          <div class="navigation-controls">\n            <button class="nav-control-button focusable" id="back-to-onboarding-nav"\n                    aria-label="Go back to setup"\n                    title="Return to setup process">\n              <span aria-hidden="true">←</span> Setup\n            </button>\n            <div class="view-state-indicator configuration" aria-label="Current view: Configuration">Config</div>\n          </div>\n        </header>\n        \n        <nav class="breadcrumb-nav" role="navigation" aria-label="Breadcrumb navigation">\n          <div class="breadcrumb-item">\n            <button class="breadcrumb-link focusable" id="breadcrumb-onboarding"\n                    aria-label="Go to setup">Setup</button>\n            <span class="breadcrumb-separator" aria-hidden="true">›</span>\n          </div>\n          <div class="breadcrumb-item">\n            <span class="breadcrumb-current" aria-current="page">Configuration</span>\n          </div>\n        </nav>\n        \n        <div class="configuration-header">\n          <p class="configuration-subtitle" id="config-description">\n            Enter your FastGPT connection details to start chatting with your knowledge base.\n          </p>\n        </div>\n\n        <main id="main-content" tabindex="-1">\n          <form id="configuration-form" class="configuration-form" novalidate \n                aria-describedby="config-description" role="form">\n            <fieldset>\n              <legend class="sr-only">FastGPT Connection Configuration</legend>\n              \n              <div class="form-group">\n                <label for="baseUrl" class="form-label">\n                  FastGPT Base URL <span class="required" aria-label="required">*</span>\n                </label>\n                <input\n                  type="url"\n                  id="baseUrl"\n                  name="baseUrl"\n                  class="form-input focusable"\n                  placeholder="https://your-fastgpt-instance.com"\n                  value="${this.formData.baseUrl||""}"\n                  aria-describedby="baseUrl-help baseUrl-error"\n                  aria-required="true"\n                  autocomplete="url"\n                />\n                <div id="baseUrl-help" class="field-help">\n                  The base URL of your FastGPT instance (e.g., https://fastgpt.io or your self-hosted URL)\n                </div>\n                <div id="baseUrl-error" class="field-error" role="alert" aria-live="polite" style="display: none;"></div>\n              </div>\n\n              <div class="form-group">\n                <label for="appId" class="form-label">\n                  App ID <span class="required" aria-label="required">*</span>\n                </label>\n                <input\n                  type="text"\n                  id="appId"\n                  name="appId"\n                  class="form-input focusable"\n                  placeholder="Enter your FastGPT App ID"\n                  value="${this.formData.appId||""}"\n                  aria-describedby="appId-help appId-error"\n                  aria-required="true"\n                  autocomplete="off"\n                />\n                <div id="appId-help" class="field-help">\n                  The unique identifier for your FastGPT application\n                </div>\n                <div id="appId-error" class="field-error" role="alert" aria-live="polite" style="display: none;"></div>\n              </div>\n\n              <div class="form-group">\n                <label for="apiKey" class="form-label">\n                  API Key <span class="required" aria-label="required">*</span>\n                </label>\n                <input\n                  type="password"\n                  id="apiKey"\n                  name="apiKey"\n                  class="form-input focusable"\n                  placeholder="Enter your FastGPT API Key"\n                  value="${this.formData.apiKey||""}"\n                  aria-describedby="apiKey-help apiKey-error"\n                  aria-required="true"\n                  autocomplete="current-password"\n                />\n                <div id="apiKey-help" class="field-help">\n                  Your FastGPT API key for authentication (will be stored securely)\n                </div>\n                <div id="apiKey-error" class="field-error" role="alert" aria-live="polite" style="display: none;"></div>\n              </div>\n\n              <div class="form-actions" role="group" aria-label="Configuration actions">\n                <button type="button" id="test-connection" class="nav-button secondary focusable"\n                        aria-describedby="test-connection-help"\n                        title="Test your connection settings">\n                  <span aria-hidden="true">🔍</span> Test Connection\n                </button>\n                <button type="submit" id="save-configuration" class="nav-button primary focusable"\n                        aria-describedby="save-configuration-help"\n                        title="Save your configuration settings">\n                  <span aria-hidden="true">💾</span> Save Configuration\n                </button>\n              </div>\n              \n              <div class="sr-only">\n                <div id="test-connection-help">Tests the connection to your FastGPT instance with the provided settings</div>\n                <div id="save-configuration-help">Saves your configuration and proceeds to the chat interface</div>\n              </div>\n            </fieldset>\n          </form>\n\n          <footer class="configuration-footer">\n            <button id="back-to-onboarding" class="nav-button secondary focusable"\n                    aria-label="Go back to setup process"\n                    title="Return to setup">\n              <span aria-hidden="true">←</span> Back to Setup\n            </button>\n          </footer>\n        </main>\n      </div>\n    `}setupEventListeners(){if(!this.container)return;this.setupKeyboardNavigation();const e=this.container.querySelector("#configuration-form"),t=this.container.querySelector("#baseUrl"),n=this.container.querySelector("#appId"),s=this.container.querySelector("#apiKey"),a=this.container.querySelector("#test-connection"),r=this.container.querySelector("#save-configuration"),i=this.container.querySelector("#back-to-onboarding");[t,n,s].forEach(e=>{e&&(e.addEventListener("input",()=>{this.handleInputChange(e),this.validateField(e)}),e.addEventListener("blur",()=>{this.validateField(e)}),e.addEventListener("keydown",t=>{"Enter"!==t.key||t.shiftKey||(t.preventDefault(),this.focusNextField(e))}))}),e&&e.addEventListener("submit",e=>{e.preventDefault(),this.handleFormSubmit()}),a&&(a.addEventListener("click",()=>{this.handleTestConnection()}),a.addEventListener("keydown",e=>{"Enter"!==e.key&&" "!==e.key||(e.preventDefault(),this.handleTestConnection())})),r&&r.addEventListener("keydown",e=>{"Enter"!==e.key&&" "!==e.key||(e.preventDefault(),this.handleFormSubmit())}),i&&(i.addEventListener("click",async()=>{await this.stateManager.resetOnboarding()}),i.addEventListener("keydown",async e=>{"Enter"!==e.key&&" "!==e.key||(e.preventDefault(),await this.stateManager.resetOnboarding())}));const o=this.container.querySelector("#back-to-onboarding-nav"),c=this.container.querySelector("#breadcrumb-onboarding");o&&(o.addEventListener("click",async()=>{await this.stateManager.setCurrentView("onboarding"),window.dispatchEvent(new CustomEvent("viewChange"))}),o.addEventListener("keydown",async e=>{"Enter"!==e.key&&" "!==e.key||(e.preventDefault(),await this.stateManager.setCurrentView("onboarding"),window.dispatchEvent(new CustomEvent("viewChange")))})),c&&(c.addEventListener("click",async()=>{await this.stateManager.setCurrentView("onboarding"),window.dispatchEvent(new CustomEvent("viewChange"))}),c.addEventListener("keydown",async e=>{"Enter"!==e.key&&" "!==e.key||(e.preventDefault(),await this.stateManager.setCurrentView("onboarding"),window.dispatchEvent(new CustomEvent("viewChange")))})),this.container.querySelector("#main-content")&&setTimeout(()=>{t&&t.focus()},100),this.container.classList.add("keyboard-navigation-active")}setupKeyboardNavigation(){if(!this.container)return;this.container.addEventListener("keydown",async e=>{if(!(e.target instanceof HTMLInputElement&&"button"!==e.target.type))switch(e.key){case"Escape":e.preventDefault(),await this.stateManager.setCurrentView("onboarding"),window.dispatchEvent(new CustomEvent("viewChange"));break;case"F5":e.preventDefault(),this.handleTestConnection();break;case"s":(e.ctrlKey||e.metaKey)&&(e.preventDefault(),this.handleFormSubmit())}});const e=this.container.querySelectorAll(".focusable");e.forEach((t,n)=>{t.addEventListener("keydown",t=>{const s=t;"Tab"===s.key&&(s.shiftKey&&0===n?(t.preventDefault(),e[e.length-1].focus()):s.shiftKey||n!==e.length-1||(t.preventDefault(),e[0].focus()))})})}focusNextField(e){const t=["baseUrl","appId","apiKey"],n=t.indexOf(e.id);if(n<t.length-1){const e=this.container?.querySelector(`#${t[n+1]}`);e&&e.focus()}else{const e=this.container?.querySelector("#test-connection");e&&e.focus()}}validateField(e){const t=e.name,n=e.value.trim(),s=this.container?.querySelector(`#${t}-error`);if(!s)return;let a="",r=!0;switch(e.classList.remove("error"),s.style.display="none",s.textContent="",t){case"baseUrl":n?this.isValidUrl(n)||(a="Please enter a valid URL starting with https://",r=!1):(a="Base URL is required",r=!1);break;case"appId":n?n.length<3&&(a="App ID must be at least 3 characters long",r=!1):(a="App ID is required",r=!1);break;case"apiKey":n?n.length<10&&(a="API Key appears to be too short",r=!1):(a="API Key is required",r=!1)}r?e.setAttribute("aria-invalid","false"):(e.classList.add("error"),s.textContent=a,s.style.display="block",e.setAttribute("aria-invalid","true"))}isValidUrl(e){try{return"https:"===new URL(e).protocol}catch{return!1}}handleInputChange(e){const t=e.name;this.formData[t]=e.value}async handleFormSubmit(){this.setLoadingState(!0);try{const e=await this.stateManager.completeConfiguration(this.formData);e.success?this.showSuccessMessage("Configuration saved successfully!"):this.showErrorMessage(e.error||"Failed to save configuration")}catch(e){this.showErrorMessage("An unexpected error occurred while saving configuration"),console.error("Configuration save error:",e)}finally{this.setLoadingState(!1)}}async handleTestConnection(){this.setTestingState(!0);try{const e=this.formData,t=new a(e),n=await t.testConnection();if(n.success)this.showSuccessMessage("Connection test successful! Your FastGPT configuration is working correctly.");else{const t=this.getUserFriendlyErrorMessage(n.error||"Connection test failed");this.showErrorMessage(t),console.error("Connection test failed:",{error:n.error,details:n.details,config:{baseUrl:e.baseUrl,appId:e.appId,hasApiKey:!!e.apiKey}})}}catch(e){this.showErrorMessage("An unexpected error occurred during connection test. Please try again."),console.error("Connection test error:",e)}finally{this.setTestingState(!1)}}setLoadingState(e){if(!this.container)return;const t=this.container.querySelector("#save-configuration"),n=this.container.querySelector("#test-connection");t&&(t.disabled=e,t.textContent=e?"Saving...":"Save Configuration"),n&&(n.disabled=e)}setTestingState(e){if(!this.container)return;const t=this.container.querySelector("#test-connection"),n=this.container.querySelector("#save-configuration");t&&(t.disabled=e,t.textContent=e?"Testing...":"Test Connection"),n&&(n.disabled=e)}getUserFriendlyErrorMessage(e){return e.includes("Network error")||e.includes("fetch")?"Unable to connect to FastGPT server. Please check your internet connection and Base URL.":e.includes("Authentication failed")||e.includes("401")?"Authentication failed. Please check your API key and ensure it has the correct permissions.":e.includes("Access forbidden")||e.includes("403")?"Access forbidden. Please verify your API key has the necessary permissions for this app.":e.includes("API endpoint not found")||e.includes("404")?"API endpoint not found. Please verify your Base URL is correct and includes the full path to your FastGPT instance.":e.includes("Bad request")||e.includes("400")?"Invalid configuration. Please check that your App ID and API key are correct.":e.includes("Rate limit")||e.includes("429")?"Too many requests. Please wait a moment before testing the connection again.":e.includes("Server error")||e.includes("500")||e.includes("502")||e.includes("503")||e.includes("504")?"FastGPT server is temporarily unavailable. Please try again in a few minutes.":e.includes("Base URL")||e.includes("URL")?"Invalid Base URL. Please ensure it starts with https:// and points to your FastGPT instance.":e.includes("App ID")?"Invalid App ID. Please check that you've entered the correct App ID from your FastGPT application.":e.includes("API Key")?"Invalid API Key. Please ensure you're using an application-specific API key, not a general key.":e||"Connection test failed. Please check your configuration and try again."}showSuccessMessage(e){this.showMessage(e,"success")}showErrorMessage(e){this.showMessage(e,"error")}showMessage(e,t){if(!this.container)return;const n=this.container.querySelector(".message");n&&n.remove();const s=document.createElement("div");s.className=`message message-${t}`,s.textContent=e;const a=this.container.querySelector(".configuration-form");a&&a.insertBefore(s,a.firstChild),"success"===t&&setTimeout(()=>{s.parentNode&&s.remove()},3e3)}async updateConfiguration(e){await this.loadExistingConfiguration(),this.formData={...this.formData,...e},this.container&&(this.container.innerHTML=this.getConfigurationHTML(),this.setupEventListeners())}getCurrentConfiguration(){return{...this.formData}}async isConfigurationModified(){const e=this.stateManager.getCurrentState(),t=e?.fastgptConfig;return!(!t&&0===Object.keys(this.formData).length||t&&0!==Object.keys(this.formData).length&&this.formData.baseUrl===t.baseUrl&&this.formData.appId===t.appId&&this.formData.apiKey===t.apiKey)}}class i{constructor(e){this.fastgptClient=null,this.currentSession=null,this.isLoading=!1,this.isStreaming=!1,this.stateManager=e,this.storageManager=new t}async render(e){await this.initializeFastGPTClient(),e.innerHTML=this.createChatHTML(),this.setupEventListeners(e),await this.loadOrCreateChatSession(),this.renderMessages()}async initializeFastGPTClient(){const e=this.stateManager.getFastGPTConfig();e&&(this.fastgptClient=new a(e))}createChatHTML(){return'\n      <a href="#main-content" class="skip-link">Skip to main content</a>\n      <div class="chat-container view-container" role="main" aria-labelledby="chat-title">\n        <header class="navigation-header" role="banner">\n          <h1 id="chat-title" class="navigation-title">FastGPT Chat</h1>\n          <div class="navigation-controls">\n            <button class="nav-control-button focusable" id="go-to-config-nav" \n                    aria-label="Go to configuration"\n                    title="Open configuration settings">\n              <span aria-hidden="true">⚙️</span> Config\n            </button>\n            <button class="nav-control-button focusable" id="settings-button" \n                    aria-label="Open settings menu"\n                    title="Open chat settings and options"\n                    aria-haspopup="true"\n                    aria-expanded="false">\n              <span aria-hidden="true">⋯</span>\n              <span class="sr-only">Settings</span>\n            </button>\n            <div class="view-state-indicator chat" aria-label="Current view: Chat">Chat</div>\n          </div>\n        </header>\n        \n        <nav class="breadcrumb-nav" role="navigation" aria-label="Breadcrumb navigation">\n          <div class="breadcrumb-item">\n            <button class="breadcrumb-link focusable" id="breadcrumb-onboarding"\n                    aria-label="Go to setup">Setup</button>\n            <span class="breadcrumb-separator" aria-hidden="true">›</span>\n          </div>\n          <div class="breadcrumb-item">\n            <button class="breadcrumb-link focusable" id="breadcrumb-configuration"\n                    aria-label="Go to configuration">Configuration</button>\n            <span class="breadcrumb-separator" aria-hidden="true">›</span>\n          </div>\n          <div class="breadcrumb-item">\n            <span class="breadcrumb-current" aria-current="page">Chat</span>\n          </div>\n        </nav>\n        \n        <div class="chat-header">\n          <div class="status-bar" role="status" aria-label="Connection status">\n            <div class="status-item">\n              <div class="status-indicator" aria-label="Connected to FastGPT"></div>\n              <span>Connected</span>\n            </div>\n            <div class="status-item">\n              <span id="message-count" aria-live="polite">0 messages</span>\n            </div>\n          </div>\n        </div>\n        \n        <main id="main-content" class="chat-messages" id="chat-messages" \n              role="log" aria-live="polite" aria-label="Chat conversation"\n              tabindex="0">\n          \x3c!-- Messages will be rendered here --\x3e\n        </main>\n        \n        <div class="chat-input-container" role="region" aria-label="Message input">\n          <div class="typing-indicator" id="typing-indicator" style="display: none;"\n               role="status" aria-live="polite" aria-label="FastGPT is typing">\n            <span class="typing-dots" aria-hidden="true">\n              <span></span>\n              <span></span>\n              <span></span>\n            </span>\n            <span class="typing-text">FastGPT is typing...</span>\n          </div>\n          \n          <div class="chat-input-wrapper" role="group" aria-label="Message composition">\n            <label for="message-input" class="sr-only">Type your message</label>\n            <textarea \n              id="message-input" \n              class="message-input focusable" \n              placeholder="Type your message here..."\n              rows="1"\n              aria-label="Type your message here"\n              aria-describedby="input-help"\n              maxlength="4000"\n            ></textarea>\n            <div id="input-help" class="sr-only">\n              Press Enter to send, Shift+Enter for new line. Maximum 4000 characters.\n            </div>\n            <button id="send-button" class="send-button focusable" disabled\n                    aria-label="Send message"\n                    title="Send your message to FastGPT"\n                    type="button">\n              <span class="send-icon" aria-hidden="true">➤</span>\n              <span class="sr-only">Send</span>\n            </button>\n          </div>\n        </div>\n        \n        <div class="loading-overlay" id="loading-overlay" style="display: none;"\n             role="status" aria-live="assertive" aria-label="Processing message">\n          <div class="loading-spinner" aria-hidden="true"></div>\n          <div class="loading-text">Sending message...</div>\n        </div>\n      </div>\n    '}setupEventListeners(e){this.setupKeyboardNavigation(e);const t=e.querySelector("#message-input"),n=e.querySelector("#send-button"),s=e.querySelector("#settings-button"),a=e.querySelector("#go-to-config-nav"),r=e.querySelector("#breadcrumb-onboarding"),i=e.querySelector("#breadcrumb-configuration"),o=e.querySelector("#chat-messages");t&&(t.addEventListener("input",()=>{this.autoResizeTextarea(t),this.updateSendButtonState(t,n),this.announceCharacterCount(t)}),t.addEventListener("keydown",e=>{"Enter"!==e.key||e.shiftKey?"Escape"===e.key&&(t.value="",this.autoResizeTextarea(t),this.updateSendButtonState(t,n)):(e.preventDefault(),this.handleSendMessage(t))}),this.updateSendButtonState(t,n)),n&&(n.addEventListener("click",()=>{this.handleSendMessage(t)}),n.addEventListener("keydown",e=>{"Enter"!==e.key&&" "!==e.key||(e.preventDefault(),this.handleSendMessage(t))})),s&&(s.addEventListener("click",()=>{this.handleSettingsClick(),s.setAttribute("aria-expanded","true")}),s.addEventListener("keydown",e=>{"Enter"!==e.key&&" "!==e.key||(e.preventDefault(),this.handleSettingsClick(),s.setAttribute("aria-expanded","true"))})),a&&(a.addEventListener("click",async()=>{await this.stateManager.setCurrentView("configuration"),window.dispatchEvent(new CustomEvent("viewChange"))}),a.addEventListener("keydown",async e=>{"Enter"!==e.key&&" "!==e.key||(e.preventDefault(),await this.stateManager.setCurrentView("configuration"),window.dispatchEvent(new CustomEvent("viewChange")))})),r&&(r.addEventListener("click",async()=>{await this.stateManager.setCurrentView("onboarding"),window.dispatchEvent(new CustomEvent("viewChange"))}),r.addEventListener("keydown",async e=>{"Enter"!==e.key&&" "!==e.key||(e.preventDefault(),await this.stateManager.setCurrentView("onboarding"),window.dispatchEvent(new CustomEvent("viewChange")))})),i&&(i.addEventListener("click",async()=>{await this.stateManager.setCurrentView("configuration"),window.dispatchEvent(new CustomEvent("viewChange"))}),i.addEventListener("keydown",async e=>{"Enter"!==e.key&&" "!==e.key||(e.preventDefault(),await this.stateManager.setCurrentView("configuration"),window.dispatchEvent(new CustomEvent("viewChange")))})),o&&o.addEventListener("keydown",e=>{switch(e.key){case"Home":e.preventDefault(),o.scrollTop=0;break;case"End":e.preventDefault(),o.scrollTop=o.scrollHeight;break;case"PageUp":e.preventDefault(),o.scrollTop-=.8*o.clientHeight;break;case"PageDown":e.preventDefault(),o.scrollTop+=.8*o.clientHeight}}),this.updateMessageCount(),e.classList.add("keyboard-navigation-active"),setTimeout(()=>{t&&t.focus()},100)}setupKeyboardNavigation(e){e.addEventListener("keydown",async t=>{if(!(t.target instanceof HTMLTextAreaElement))switch(t.key){case"n":(t.ctrlKey||t.metaKey)&&(t.preventDefault(),await this.startNewChat());break;case"k":(t.ctrlKey||t.metaKey)&&(t.preventDefault(),await this.confirmAction("Clear Chat History","Are you sure you want to clear all chat history? This action cannot be undone.")&&await this.clearChatHistory());break;case",":(t.ctrlKey||t.metaKey)&&(t.preventDefault(),this.handleSettingsClick());break;case"/":t.preventDefault();const n=e.querySelector("#message-input");n&&n.focus();break;case"Escape":const s=document.querySelector(".settings-menu");if(s){document.body.removeChild(s);const t=e.querySelector("#settings-button");t&&(t.setAttribute("aria-expanded","false"),t.focus())}else{const t=e.querySelector("#message-input");t&&t.focus()}}});const t=e.querySelectorAll(".focusable");t.forEach((e,n)=>{e.addEventListener("keydown",e=>{const s=e;"Tab"===s.key&&(s.shiftKey&&0===n?(e.preventDefault(),t[t.length-1].focus()):s.shiftKey||n!==t.length-1||(e.preventDefault(),t[0].focus()))})})}announceCharacterCount(e){const t=e.value.length,n=parseInt(e.getAttribute("maxlength")||"4000")-t;if(n<=100&&n%10==0){const e=`${n} characters remaining`;this.announceToScreenReader(e)}}announceToScreenReader(e){const t=document.createElement("div");t.setAttribute("aria-live","polite"),t.setAttribute("aria-atomic","true"),t.className="sr-only",t.textContent=e,document.body.appendChild(t),setTimeout(()=>{t.parentNode&&document.body.removeChild(t)},1e3)}autoResizeTextarea(e){e.style.height="auto";const t=Math.min(e.scrollHeight,120);e.style.height=t+"px"}updateSendButtonState(e,t){const n=e.value.trim().length>0&&!this.isLoading&&!this.isStreaming;t.disabled=!n,t.classList.toggle("active",n)}async handleSendMessage(e){const t=e.value.trim();if(t&&!this.isLoading&&!this.isStreaming&&this.fastgptClient){e.value="",e.style.height="auto",this.setLoadingState(!0);try{const e=this.createMessage("user",t);await this.addMessageToSession(e),this.renderMessages(),this.showTypingIndicator(!0);const n=this.createMessage("assistant","");await this.addMessageToSession(n),this.renderMessages(),this.showTypingIndicator(!1),this.setStreamingState(!0),await this.streamMessageResponse(n,t)}catch(e){console.error("Error sending message:",e),this.showTypingIndicator(!1),await this.showErrorMessage("Failed to send message. Please try again.")}finally{this.setLoadingState(!1),this.updateSendButtonState(e,document.querySelector("#send-button"))}}}handleSettingsClick(){this.showSettingsMenu()}showSettingsMenu(){const e=document.createElement("div");e.className="settings-menu",e.innerHTML='\n      <div class="settings-menu-overlay" id="settings-overlay"></div>\n      <div class="settings-menu-content">\n        <div class="settings-menu-header">\n          <h3>Settings & Data Management</h3>\n          <button class="close-button" id="close-settings">✕</button>\n        </div>\n        <div class="settings-menu-body">\n          <div class="settings-section">\n            <div class="settings-section-title">Chat Management</div>\n            <button class="settings-option" id="new-chat">\n              <span class="option-icon">💬</span>\n              <span class="option-text">New Chat</span>\n            </button>\n            <button class="settings-option" id="clear-history">\n              <span class="option-icon">🗑️</span>\n              <span class="option-text">Clear Chat History</span>\n            </button>\n          </div>\n          \n          <div class="settings-section">\n            <div class="settings-section-title">Configuration</div>\n            <button class="settings-option" id="go-to-config">\n              <span class="option-icon">⚙️</span>\n              <span class="option-text">Edit Configuration</span>\n            </button>\n            <button class="settings-option" id="reset-config">\n              <span class="option-icon">🔄</span>\n              <span class="option-text">Reset Configuration</span>\n            </button>\n          </div>\n          \n          <div class="settings-section">\n            <div class="settings-section-title">Data Management</div>\n            <button class="settings-option" id="export-data">\n              <span class="option-icon">📤</span>\n              <span class="option-text">Export Data</span>\n            </button>\n            <button class="settings-option" id="import-data">\n              <span class="option-icon">📥</span>\n              <span class="option-text">Import Data</span>\n            </button>\n            <button class="settings-option danger" id="reset-all">\n              <span class="option-icon">⚠️</span>\n              <span class="option-text">Reset All Data</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    ',document.body.appendChild(e),this.setupSettingsMenuListeners(e)}setupSettingsMenuListeners(e){const t=e.querySelector("#settings-overlay"),n=e.querySelector("#close-settings"),s=e.querySelector("#new-chat"),a=e.querySelector("#clear-history"),r=e.querySelector("#go-to-config"),i=e.querySelector("#reset-config"),o=e.querySelector("#export-data"),c=e.querySelector("#import-data"),l=e.querySelector("#reset-all"),d=()=>{document.body.removeChild(e)};t?.addEventListener("click",d),n?.addEventListener("click",d),s?.addEventListener("click",async()=>{await this.startNewChat(),d()}),a?.addEventListener("click",async()=>{await this.confirmAction("Clear Chat History","Are you sure you want to clear all chat history? This action cannot be undone.")&&await this.clearChatHistory(),d()}),r?.addEventListener("click",async()=>{await this.stateManager.setCurrentView("configuration"),window.dispatchEvent(new CustomEvent("viewChange",{detail:{view:"configuration"}})),d()}),i?.addEventListener("click",async()=>{await this.confirmAction("Reset Configuration","Are you sure you want to reset your FastGPT configuration? You will need to reconfigure your connection settings.")&&await this.resetConfiguration(),d()}),o?.addEventListener("click",async()=>{await this.exportData(),d()}),c?.addEventListener("click",async()=>{await this.importData(),d()}),l?.addEventListener("click",async()=>{await this.confirmAction("Reset All Data","Are you sure you want to reset ALL extension data? This will clear your configuration, chat history, and all settings. This action cannot be undone.",!0)&&await this.resetAllData(),d()})}setLoadingState(e){this.isLoading=e;const t=document.querySelector("#loading-overlay"),n=document.querySelector("#message-input"),s=document.querySelector("#send-button");t&&(t.style.display=e?"flex":"none"),n&&(n.disabled=e),s&&this.updateSendButtonState(n,s)}setStreamingState(e){this.isStreaming=e;const t=document.querySelector("#message-input"),n=document.querySelector("#send-button");t&&(t.disabled=e),n&&this.updateSendButtonState(t,n);const s=document.querySelector(".loading-text");s&&(s.textContent=e?"Receiving response...":"Sending message...")}showTypingIndicator(e){const t=document.querySelector("#typing-indicator");t&&(t.style.display=e?"flex":"none")}async streamMessageResponse(e,t){if(!this.fastgptClient||!this.currentSession)throw new Error("FastGPT client or current session not available");let n="";try{const s=document.querySelector(`[data-message-id="${e.id}"]`),a=s?.querySelector(".message-content"),r=s?.querySelector(".message-text");if(!r||!a)throw new Error("Message element not found for streaming updates");s?.classList.add("streaming"),a.classList.add("streaming");const i=this.fastgptClient.sendMessageStream(t,this.currentSession.id);let o=0;for await(const t of i){if(!this.isStreaming){console.log("Streaming was interrupted by user");break}n+=t,o++,e.content=n,r.innerHTML=this.formatMessageContent(n),this.scrollToBottom(),o%5==0&&await this.sleep(20)}s?.classList.remove("streaming"),a.classList.remove("streaming"),e.content=n,e.timestamp=new Date,r.innerHTML=this.formatMessageContent(n),await this.saveChatSession(),console.log(`Streaming completed successfully with ${o} chunks`)}catch(t){console.error("Error during streaming:",t);const s=document.querySelector(`[data-message-id="${e.id}"]`),a=s?.querySelector(".message-content");s?.classList.remove("streaming"),a?.classList.remove("streaming"),t instanceof Error?t.message.includes("aborted")||t.message.includes("cancelled")?e.content=n+"\n\n_[Response was interrupted]_":t.message.includes("network")||t.message.includes("connection")?e.content=n+"\n\n❌ _Connection lost during response. Please try again._":t.message.includes("timeout")?e.content=n+"\n\n❌ _Request timed out. Please try again._":e.content=n+"\n\n❌ _An error occurred while receiving the response._":e.content=n+"\n\n❌ _An unexpected error occurred._";const r=s?.querySelector(".message-text");throw r&&(r.innerHTML=this.formatMessageContent(e.content)),await this.saveChatSession(),t}finally{this.setStreamingState(!1)}}scrollToBottom(){const e=document.querySelector("#chat-messages");e&&(e.scrollTop=e.scrollHeight)}sleep(e){return new Promise(t=>setTimeout(t,e))}async showErrorMessage(e){const t=this.createMessage("assistant",`❌ ${e}`);await this.addMessageToSession(t),this.renderMessages()}createMessage(e,t){return{id:this.generateMessageId(),role:e,content:t,timestamp:new Date}}generateMessageId(){return`msg_${Date.now()}_${Math.random().toString(36).substring(2,11)}`}async loadOrCreateChatSession(){try{const e=await this.storageManager.getChatSessions();if(e.success&&e.data){const t=e.data,n=Object.keys(t);if(n.length>0){const e=n.reduce((e,n)=>{const s=new Date(t[e].updatedAt);return new Date(t[n].updatedAt)>s?n:e}),s=t[e];return this.currentSession={id:e,messages:s.messages.map(e=>({...e,timestamp:new Date(e.timestamp)})),createdAt:new Date(s.createdAt),updatedAt:new Date(s.updatedAt)},void console.log(`Loaded existing chat session: ${e} with ${this.currentSession.messages.length} messages`)}}await this.createNewChatSession()}catch(e){console.error("Error loading chat session:",e),await this.createNewChatSession()}}async createNewChatSession(){this.currentSession={id:this.generateSessionId(),messages:[],createdAt:new Date,updatedAt:new Date},await this.saveChatSession(),console.log(`Created new chat session: ${this.currentSession.id}`)}generateSessionId(){return`session_${Date.now()}_${Math.random().toString(36).substring(2,11)}`}async addMessageToSession(e){this.currentSession&&(this.currentSession.messages.push(e),this.currentSession.updatedAt=new Date,await this.saveChatSession())}async saveChatSession(){if(this.currentSession)try{const e=await this.storageManager.setChatSession(this.currentSession.id,this.currentSession);e.success||console.error("Failed to save chat session:",e.error)}catch(e){console.error("Error saving chat session:",e)}}renderMessages(){const e=document.querySelector("#chat-messages");e&&this.currentSession&&(e.innerHTML="",0!==this.currentSession.messages.length?(this.currentSession.messages.forEach(t=>{const n=this.createMessageElement(t);e.appendChild(n)}),e.scrollTop=e.scrollHeight,this.updateMessageCount()):e.innerHTML='\n        <div class="welcome-message">\n          <div class="welcome-icon">🤖</div>\n          <h3>Welcome to FastGPT!</h3>\n          <p>Start a conversation by typing a message below.</p>\n        </div>\n      ')}createMessageElement(e){const t=document.createElement("div");t.className=`message message-${e.role}`,t.setAttribute("data-message-id",e.id);const n=this.formatTimestamp(e.timestamp);return t.innerHTML=`\n      <div class="message-content">\n        <div class="message-text">${this.formatMessageContent(e.content)}</div>\n        <div class="message-timestamp">${n}</div>\n      </div>\n    `,t}formatMessageContent(e){return e?e.replace(/\n/g,"<br>"):""}formatTimestamp(e){const t=(new Date).getTime()-e.getTime();return t<6e4?"Just now":t<36e5?`${Math.floor(t/6e4)}m ago`:t<864e5?`${Math.floor(t/36e5)}h ago`:e.toLocaleDateString()}async startNewChat(){try{await this.createNewChatSession(),this.renderMessages(),console.log("Started new chat session")}catch(e){console.error("Error starting new chat:",e),await this.showErrorMessage("Failed to start new chat. Please try again.")}}async clearChatHistory(){try{const e=await this.storageManager.getChatSessions();if(e.success&&e.data&&Object.keys(e.data).length>0){const e=await this.storageManager.removeData(["chatSessions"]);if(!e.success)throw new Error(e.error||"Failed to clear chat history")}await this.createNewChatSession(),this.renderMessages(),console.log("Chat history cleared successfully")}catch(e){console.error("Error clearing chat history:",e),await this.showErrorMessage("Failed to clear chat history. Please try again.")}}async getAllChatSessions(){try{const e=await this.storageManager.getChatSessions();if(e.success&&e.data){const t={};return Object.entries(e.data).forEach(([e,n])=>{t[e]={id:e,messages:n.messages.map(e=>({...e,timestamp:new Date(e.timestamp)})),createdAt:new Date(n.createdAt),updatedAt:new Date(n.updatedAt)}}),t}return null}catch(e){return console.error("Error getting chat sessions:",e),null}}async loadChatSession(e){try{const t=await this.storageManager.getChatSessions();if(t.success&&t.data&&t.data[e]){const n=t.data[e];return this.currentSession={id:e,messages:n.messages.map(e=>({...e,timestamp:new Date(e.timestamp)})),createdAt:new Date(n.createdAt),updatedAt:new Date(n.updatedAt)},this.renderMessages(),console.log(`Loaded chat session: ${e} with ${this.currentSession.messages.length} messages`),!0}return!1}catch(e){return console.error("Error loading chat session:",e),!1}}updateMessageCount(){const e=document.querySelector("#message-count");if(e&&this.currentSession){const t=this.currentSession.messages.length;e.textContent=`${t} message${1!==t?"s":""}`}}async confirmAction(e,t,n=!1){return new Promise(s=>{const a=document.createElement("div");a.className="confirm-dialog",a.innerHTML=`\n        <div class="confirm-dialog-overlay"></div>\n        <div class="confirm-dialog-content">\n          <div class="confirm-dialog-header ${n?"danger":""}">\n            <h3>${e}</h3>\n          </div>\n          <div class="confirm-dialog-body">\n            <p>${t}</p>\n          </div>\n          <div class="confirm-dialog-actions">\n            <button class="nav-button secondary" id="confirm-cancel">Cancel</button>\n            <button class="nav-button ${n?"danger":"primary"}" id="confirm-ok">\n              ${n?"Delete":"Confirm"}\n            </button>\n          </div>\n        </div>\n      `,document.body.appendChild(a);const r=a.querySelector("#confirm-cancel"),i=a.querySelector("#confirm-ok"),o=a.querySelector(".confirm-dialog-overlay"),c=()=>{document.body.removeChild(a)};r.addEventListener("click",()=>{c(),s(!1)}),i.addEventListener("click",()=>{c(),s(!0)}),o.addEventListener("click",()=>{c(),s(!1)})})}async resetConfiguration(){try{(await this.stateManager.resetConfiguration()).success?(await this.stateManager.setCurrentView("configuration"),window.dispatchEvent(new CustomEvent("viewChange"))):await this.showErrorMessage("Failed to reset configuration. Please try again.")}catch(e){console.error("Error resetting configuration:",e),await this.showErrorMessage("An error occurred while resetting configuration.")}}async exportData(){try{const[e,t]=await Promise.all([this.storageManager.getChatSessions(),this.stateManager.getCurrentState()]),n={version:"1.0.0",exportDate:(new Date).toISOString(),chatSessions:e.success?e.data:{},extensionState:t,metadata:{totalSessions:e.success&&e.data?Object.keys(e.data).length:0,totalMessages:this.getTotalMessageCount(e.success?e.data:{})}},s=new Blob([JSON.stringify(n,null,2)],{type:"application/json"}),a=URL.createObjectURL(s),r=document.createElement("a");r.href=a,r.download=`fastgpt-extension-data-${(new Date).toISOString().split("T")[0]}.json`,document.body.appendChild(r),r.click(),document.body.removeChild(r),URL.revokeObjectURL(a),console.log("Data exported successfully")}catch(e){console.error("Error exporting data:",e),await this.showErrorMessage("Failed to export data. Please try again.")}}async importData(){try{const e=document.createElement("input");e.type="file",e.accept=".json",e.onchange=async e=>{const t=e.target.files?.[0];if(t)try{const e=await t.text(),n=JSON.parse(e);if(!this.validateImportData(n))return void await this.showErrorMessage("Invalid import file format. Please select a valid FastGPT extension export file.");if(!await this.confirmAction("Import Data",`This will replace all current data with the imported data. The import contains ${n.metadata?.totalSessions||0} chat sessions and ${n.metadata?.totalMessages||0} messages. Continue?`,!0))return;if(n.chatSessions&&!(await this.storageManager.setChatSessions(n.chatSessions)).success)throw new Error("Failed to import chat sessions");await this.loadOrCreateChatSession(),this.renderMessages(),console.log("Data imported successfully")}catch(e){console.error("Error importing data:",e),await this.showErrorMessage("Failed to import data. Please check the file format and try again.")}},e.click()}catch(e){console.error("Error setting up import:",e),await this.showErrorMessage("Failed to set up data import. Please try again.")}}async resetAllData(){try{(await this.stateManager.resetAllState()).success?(await this.stateManager.setCurrentView("onboarding"),window.dispatchEvent(new CustomEvent("viewChange"))):await this.showErrorMessage("Failed to reset all data. Please try again.")}catch(e){console.error("Error resetting all data:",e),await this.showErrorMessage("An error occurred while resetting all data.")}}validateImportData(e){try{if(!e||"object"!=typeof e)return!1;if(!e.version||!e.exportDate)return!1;if(e.chatSessions&&"object"==typeof e.chatSessions)for(const[t,n]of Object.entries(e.chatSessions)){const e=n;if(!e.messages||!Array.isArray(e.messages))return!1;if(!e.createdAt||!e.updatedAt)return!1}return!0}catch(e){return!1}}getTotalMessageCount(e){let t=0;if(e&&"object"==typeof e)for(const n of Object.values(e)){const e=n;e.messages&&Array.isArray(e.messages)&&(t+=e.messages.length)}return t}}class o{constructor(){this.appContainer=null,this.stateManager=new n,this.onboardingComponent=new s(this.stateManager),this.configurationComponent=new r(this.stateManager),this.chatComponent=new i(this.stateManager),this.setupEventListeners()}async initialize(){if(this.appContainer=document.getElementById("app"),this.appContainer)try{const e=await this.stateManager.initialize();if(!e.success)return console.error("Failed to initialize state:",e.error),void this.showError("Failed to initialize extension state");await this.renderCurrentView()}catch(e){console.error("Error initializing popup:",e),this.showError("An error occurred while loading the extension")}else console.error("App container not found")}async renderCurrentView(){if(!this.appContainer)return;const e=this.stateManager.getCurrentView();this.appContainer.classList.add("view-transitioning");try{switch(e){case"onboarding":default:await this.renderOnboardingView();break;case"configuration":await this.renderConfigurationView();break;case"chat":await this.renderChatView()}}finally{setTimeout(()=>{this.appContainer?.classList.remove("view-transitioning")},300)}}async renderOnboardingView(){console.log("Rendering onboarding view"),this.appContainer&&(await this.onboardingComponent.render(this.appContainer),console.log("Onboarding view rendered"))}async renderConfigurationView(){console.log("Rendering configuration view"),this.appContainer&&(await this.configurationComponent.render(this.appContainer),console.log("Configuration view rendered"))}async renderChatView(){console.log("Rendering chat view"),this.appContainer&&(await this.chatComponent.render(this.appContainer),console.log("Chat view rendered"))}showError(e){if(!this.appContainer)return;this.appContainer.innerHTML=`\n            <div class="error-container">\n                <div class="error-icon">⚠️</div>\n                <h3>Error</h3>\n                <p>${e}</p>\n                <button id="retry-button" class="nav-button primary">\n                    Retry\n                </button>\n            </div>\n        `;const t=this.appContainer.querySelector("#retry-button");t&&t.addEventListener("click",()=>{this.initialize()})}setupEventListeners(){window.addEventListener("onboardingComplete",async()=>{await this.renderCurrentView()}),window.addEventListener("viewChange",async e=>{await this.renderCurrentView()});let e=null;this.stateManager.addStateChangeListener(async t=>{console.log("State changed:",t);const n=this.stateManager.getCurrentView();n!==e&&(e=n,await this.renderCurrentView())})}}console.log("FastGPT Extension script loaded!"),document.addEventListener("DOMContentLoaded",()=>{console.log("DOM loaded, initializing popup app"),(new o).initialize()}),console.log("Script executing immediately")})();